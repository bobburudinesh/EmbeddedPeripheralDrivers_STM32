
stm32f4xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000984  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000b0c  08000b0c  00001b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b1c  08000b1c  00001b2c  2**0
                  CONTENTS
  4 .ARM          00000008  08000b1c  08000b1c  00001b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b24  08000b2c  00001b2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b24  08000b24  00001b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b28  08000b28  00001b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001b2c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013cd  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000434  00000000  00000000  00002f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00003360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000010f  00000000  00000000  000034d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000234d  00000000  00000000  000035e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a34  00000000  00000000  00005934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009802  00000000  00000000  00007368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010b6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000558  00000000  00000000  00010bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  00011108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000af4 	.word	0x08000af4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000af4 	.word	0x08000af4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SPI2_GPIOInits>:
 * PB13 - SPI2_CLK
 * PB14 - SPI2_MISO
 * PB15 - SPI2_MOSI
 * */

void SPI2_GPIOInits(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t	spi_Pins;
	spi_Pins.pGPIOx = GPIOB;
 80001de:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <SPI2_GPIOInits+0x58>)
 80001e0:	607b      	str	r3, [r7, #4]
	spi_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	spi_Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
	spi_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	733b      	strb	r3, [r7, #12]
	spi_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001ee:	2302      	movs	r3, #2
 80001f0:	72bb      	strb	r3, [r7, #10]
	spi_Pins.GPIO_PinConfig.GPIO_PinpupdControl = GPIO_NO_PUPD;
 80001f2:	2300      	movs	r3, #0
 80001f4:	72fb      	strb	r3, [r7, #11]

	// init pin 12
	spi_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&spi_Pins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f989 	bl	8000514 <GPIO_Init>

	// init pin 13
	spi_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000202:	230d      	movs	r3, #13
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&spi_Pins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f983 	bl	8000514 <GPIO_Init>

	// init pin 14
	spi_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800020e:	230e      	movs	r3, #14
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&spi_Pins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f97d 	bl	8000514 <GPIO_Init>

	// init pin 15
	spi_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800021a:	230f      	movs	r3, #15
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&spi_Pins);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f977 	bl	8000514 <GPIO_Init>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40020400 	.word	0x40020400

08000234 <SPI2_Inits>:

void SPI2_Inits(void) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b088      	sub	sp, #32
 8000238:	af00      	add	r7, sp, #0
	SPI_Handle_t spi2_Handle;

	spi2_Handle.pSPIx = SPI2;
 800023a:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <SPI2_Inits+0x38>)
 800023c:	603b      	str	r3, [r7, #0]
	spi2_Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800023e:	2301      	movs	r3, #1
 8000240:	717b      	strb	r3, [r7, #5]
	spi2_Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000242:	2301      	movs	r3, #1
 8000244:	713b      	strb	r3, [r7, #4]
	spi2_Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; // generates 8Mhz of CLK
 8000246:	2300      	movs	r3, #0
 8000248:	71bb      	strb	r3, [r7, #6]
	spi2_Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800024a:	2300      	movs	r3, #0
 800024c:	71fb      	strb	r3, [r7, #7]
	spi2_Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	727b      	strb	r3, [r7, #9]
	spi2_Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000252:	2300      	movs	r3, #0
 8000254:	723b      	strb	r3, [r7, #8]
	spi2_Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // SSM ENable the configure SSI as ENbale else Disbale SSI.
 8000256:	2300      	movs	r3, #0
 8000258:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&spi2_Handle);
 800025a:	463b      	mov	r3, r7
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fb4b 	bl	80008f8 <SPI_Init>
}
 8000262:	bf00      	nop
 8000264:	3720      	adds	r7, #32
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40003800 	.word	0x40003800

08000270 <main>:

int main (void) {
 8000270:	b590      	push	{r4, r7, lr}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
	char userData[] = "Hello World!";
 8000276:	4b1c      	ldr	r3, [pc, #112]	@ (80002e8 <main+0x78>)
 8000278:	f107 0408 	add.w	r4, r7, #8
 800027c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800027e:	c407      	stmia	r4!, {r0, r1, r2}
 8000280:	7023      	strb	r3, [r4, #0]
	// This function configures GPIO's for SPI2 peripheral
	SPI2_GPIOInits();
 8000282:	f7ff ffa9 	bl	80001d8 <SPI2_GPIOInits>
	//This function configures SPI2 peripheral
	SPI2_Inits();
 8000286:	f7ff ffd5 	bl	8000234 <SPI2_Inits>
	//SPI_SSIConfig(SPI2, ENABLE);
	/*
	 * If we are using SSE as disable the we have to drive output through NSS pin for Slave select, for this we have to enable SSOE bit
	 * Else (if we are using SSM as Enable) comment below line
	 * */
	SPI_SSOEConfig(SPI2, ENABLE);
 800028a:	2101      	movs	r1, #1
 800028c:	4817      	ldr	r0, [pc, #92]	@ (80002ec <main+0x7c>)
 800028e:	f000 fbf0 	bl	8000a72 <SPI_SSOEConfig>
	while(1) {

			// Finally we have to enable SPI peripheral, this bit will be disabled by default this have to be enables once all the spi configurations are made.
			// Because once this bit is enabled SPI will be busy in communication it will not accept any changes to its control bits.
			SPI_Peripheral_Control(SPI2, ENABLE);
 8000292:	2101      	movs	r1, #1
 8000294:	4815      	ldr	r0, [pc, #84]	@ (80002ec <main+0x7c>)
 8000296:	f000 fbd0 	bl	8000a3a <SPI_Peripheral_Control>
			// First send data length to spi slave
			uint8_t dataLength = strlen(userData);
 800029a:	f107 0308 	add.w	r3, r7, #8
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ff92 	bl	80001c8 <strlen>
 80002a4:	4603      	mov	r3, r0
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	71fb      	strb	r3, [r7, #7]
			SPI_SendData(SPI2, &dataLength, 1);
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	2201      	movs	r2, #1
 80002ae:	4619      	mov	r1, r3
 80002b0:	480e      	ldr	r0, [pc, #56]	@ (80002ec <main+0x7c>)
 80002b2:	f000 fb7a 	bl	80009aa <SPI_SendData>
			SPI_SendData(SPI2, (uint8_t*)userData, strlen(userData));
 80002b6:	f107 0308 	add.w	r3, r7, #8
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff84 	bl	80001c8 <strlen>
 80002c0:	4602      	mov	r2, r0
 80002c2:	f107 0308 	add.w	r3, r7, #8
 80002c6:	4619      	mov	r1, r3
 80002c8:	4808      	ldr	r0, [pc, #32]	@ (80002ec <main+0x7c>)
 80002ca:	f000 fb6e 	bl	80009aa <SPI_SendData>
			// Confieming SPI is not Busy meaning it has completed data transmission
			while(SPI_GetFlagStatus(SPI2, SPI_SR_BSY));
 80002ce:	bf00      	nop
 80002d0:	2107      	movs	r1, #7
 80002d2:	4806      	ldr	r0, [pc, #24]	@ (80002ec <main+0x7c>)
 80002d4:	f000 fb9d 	bl	8000a12 <SPI_GetFlagStatus>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1f8      	bne.n	80002d0 <main+0x60>

			SPI_Peripheral_Control(SPI2, DISABLE);
 80002de:	2100      	movs	r1, #0
 80002e0:	4802      	ldr	r0, [pc, #8]	@ (80002ec <main+0x7c>)
 80002e2:	f000 fbaa 	bl	8000a3a <SPI_Peripheral_Control>
	while(1) {
 80002e6:	e7d4      	b.n	8000292 <main+0x22>
 80002e8:	08000b0c 	.word	0x08000b0c
 80002ec:	40003800 	.word	0x40003800

080002f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f0:	480d      	ldr	r0, [pc, #52]	@ (8000328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f8:	480c      	ldr	r0, [pc, #48]	@ (800032c <LoopForever+0x6>)
  ldr r1, =_edata
 80002fa:	490d      	ldr	r1, [pc, #52]	@ (8000330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000334 <LoopForever+0xe>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a0a      	ldr	r2, [pc, #40]	@ (8000338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000310:	4c0a      	ldr	r4, [pc, #40]	@ (800033c <LoopForever+0x16>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031e:	f000 fbc5 	bl	8000aac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000322:	f7ff ffa5 	bl	8000270 <main>

08000326 <LoopForever>:

LoopForever:
  b LoopForever
 8000326:	e7fe      	b.n	8000326 <LoopForever>
  ldr   r0, =_estack
 8000328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000334:	08000b2c 	.word	0x08000b2c
  ldr r2, =_sbss
 8000338:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800033c:	2000001c 	.word	0x2000001c

08000340 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC_IRQHandler>
	...

08000344 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 * */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE) {
 8000350:	78fb      	ldrb	r3, [r7, #3]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d162      	bne.n	800041c <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA) {
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a64      	ldr	r2, [pc, #400]	@ (80004ec <GPIO_PeriClockControl+0x1a8>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800035e:	4b64      	ldr	r3, [pc, #400]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000362:	4a63      	ldr	r2, [pc, #396]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6313      	str	r3, [r2, #48]	@ 0x30
					GPIOH_PCLK_DI();
				}else if (pGPIOx == GPIOI) {
					GPIOI_PCLK_DI();
				}
	}
}
 800036a:	e0b9      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a61      	ldr	r2, [pc, #388]	@ (80004f4 <GPIO_PeriClockControl+0x1b0>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000374:	4b5e      	ldr	r3, [pc, #376]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000378:	4a5d      	ldr	r2, [pc, #372]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 800037a:	f043 0302 	orr.w	r3, r3, #2
 800037e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000380:	e0ae      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC) {
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a5c      	ldr	r2, [pc, #368]	@ (80004f8 <GPIO_PeriClockControl+0x1b4>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d106      	bne.n	8000398 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800038a:	4b59      	ldr	r3, [pc, #356]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038e:	4a58      	ldr	r2, [pc, #352]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 8000390:	f043 0304 	orr.w	r3, r3, #4
 8000394:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000396:	e0a3      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD) {
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a58      	ldr	r2, [pc, #352]	@ (80004fc <GPIO_PeriClockControl+0x1b8>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d106      	bne.n	80003ae <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003a0:	4b53      	ldr	r3, [pc, #332]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a4:	4a52      	ldr	r2, [pc, #328]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ac:	e098      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE) {
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a53      	ldr	r2, [pc, #332]	@ (8000500 <GPIO_PeriClockControl+0x1bc>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003b6:	4b4e      	ldr	r3, [pc, #312]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ba:	4a4d      	ldr	r2, [pc, #308]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80003bc:	f043 0310 	orr.w	r3, r3, #16
 80003c0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c2:	e08d      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a4f      	ldr	r2, [pc, #316]	@ (8000504 <GPIO_PeriClockControl+0x1c0>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003cc:	4b48      	ldr	r3, [pc, #288]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d0:	4a47      	ldr	r2, [pc, #284]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80003d2:	f043 0320 	orr.w	r3, r3, #32
 80003d6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d8:	e082      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG) {
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a4a      	ldr	r2, [pc, #296]	@ (8000508 <GPIO_PeriClockControl+0x1c4>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003e2:	4b43      	ldr	r3, [pc, #268]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e6:	4a42      	ldr	r2, [pc, #264]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80003e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003ec:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ee:	e077      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH) {
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a46      	ldr	r2, [pc, #280]	@ (800050c <GPIO_PeriClockControl+0x1c8>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003f8:	4b3d      	ldr	r3, [pc, #244]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fc:	4a3c      	ldr	r2, [pc, #240]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80003fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000402:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000404:	e06c      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI) {
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a41      	ldr	r2, [pc, #260]	@ (8000510 <GPIO_PeriClockControl+0x1cc>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d168      	bne.n	80004e0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800040e:	4b38      	ldr	r3, [pc, #224]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000412:	4a37      	ldr	r2, [pc, #220]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 8000414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000418:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800041a:	e061      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a33      	ldr	r2, [pc, #204]	@ (80004ec <GPIO_PeriClockControl+0x1a8>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <GPIO_PeriClockControl+0xee>
					GPIOA_PCLK_DI();
 8000424:	4b32      	ldr	r3, [pc, #200]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000428:	4a31      	ldr	r2, [pc, #196]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 800042a:	f023 0301 	bic.w	r3, r3, #1
 800042e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000430:	e056      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
				} else if (pGPIOx == GPIOB) {
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a2f      	ldr	r2, [pc, #188]	@ (80004f4 <GPIO_PeriClockControl+0x1b0>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_PeriClockControl+0x104>
					GPIOB_PCLK_DI();
 800043a:	4b2d      	ldr	r3, [pc, #180]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 800043c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043e:	4a2c      	ldr	r2, [pc, #176]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 8000440:	f023 0302 	bic.w	r3, r3, #2
 8000444:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000446:	e04b      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOC) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a2b      	ldr	r2, [pc, #172]	@ (80004f8 <GPIO_PeriClockControl+0x1b4>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d106      	bne.n	800045e <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLK_DI();
 8000450:	4b27      	ldr	r3, [pc, #156]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000454:	4a26      	ldr	r2, [pc, #152]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 8000456:	f023 0304 	bic.w	r3, r3, #4
 800045a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800045c:	e040      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOD) {
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a26      	ldr	r2, [pc, #152]	@ (80004fc <GPIO_PeriClockControl+0x1b8>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <GPIO_PeriClockControl+0x130>
					GPIOD_PCLK_DI();
 8000466:	4b22      	ldr	r3, [pc, #136]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046a:	4a21      	ldr	r2, [pc, #132]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 800046c:	f023 0308 	bic.w	r3, r3, #8
 8000470:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000472:	e035      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOE) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a22      	ldr	r2, [pc, #136]	@ (8000500 <GPIO_PeriClockControl+0x1bc>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d106      	bne.n	800048a <GPIO_PeriClockControl+0x146>
					GPIOE_PCLK_DI();
 800047c:	4b1c      	ldr	r3, [pc, #112]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000480:	4a1b      	ldr	r2, [pc, #108]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 8000482:	f023 0310 	bic.w	r3, r3, #16
 8000486:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000488:	e02a      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOF) {
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a1d      	ldr	r2, [pc, #116]	@ (8000504 <GPIO_PeriClockControl+0x1c0>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d106      	bne.n	80004a0 <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLK_DI();
 8000492:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000496:	4a16      	ldr	r2, [pc, #88]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 8000498:	f023 0320 	bic.w	r3, r3, #32
 800049c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800049e:	e01f      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOG) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a19      	ldr	r2, [pc, #100]	@ (8000508 <GPIO_PeriClockControl+0x1c4>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d106      	bne.n	80004b6 <GPIO_PeriClockControl+0x172>
					GPIOG_PCLK_DI();
 80004a8:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ac:	4a10      	ldr	r2, [pc, #64]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80004ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b4:	e014      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOH) {
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4a14      	ldr	r2, [pc, #80]	@ (800050c <GPIO_PeriClockControl+0x1c8>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d106      	bne.n	80004cc <GPIO_PeriClockControl+0x188>
					GPIOH_PCLK_DI();
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80004c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c2:	4a0b      	ldr	r2, [pc, #44]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80004c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ca:	e009      	b.n	80004e0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOI) {
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a10      	ldr	r2, [pc, #64]	@ (8000510 <GPIO_PeriClockControl+0x1cc>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d105      	bne.n	80004e0 <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_DI();
 80004d4:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80004d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d8:	4a05      	ldr	r2, [pc, #20]	@ (80004f0 <GPIO_PeriClockControl+0x1ac>)
 80004da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40020000 	.word	0x40020000
 80004f0:	40023800 	.word	0x40023800
 80004f4:	40020400 	.word	0x40020400
 80004f8:	40020800 	.word	0x40020800
 80004fc:	40020c00 	.word	0x40020c00
 8000500:	40021000 	.word	0x40021000
 8000504:	40021400 	.word	0x40021400
 8000508:	40021800 	.word	0x40021800
 800050c:	40021c00 	.word	0x40021c00
 8000510:	40022000 	.word	0x40022000

08000514 <GPIO_Init>:

/*
 * Init and DEInit
 * */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temp register
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
	// Enable Clock Here
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2101      	movs	r1, #1
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ff0c 	bl	8000344 <GPIO_PeriClockControl>
	// 1. CONFIGURE MODE
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	795b      	ldrb	r3, [r3, #5]
 8000530:	2b03      	cmp	r3, #3
 8000532:	d81f      	bhi.n	8000574 <GPIO_Init+0x60>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	795b      	ldrb	r3, [r3, #5]
 8000538:	461a      	mov	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	791b      	ldrb	r3, [r3, #4]
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	4619      	mov	r1, r3
 8000552:	2303      	movs	r3, #3
 8000554:	408b      	lsls	r3, r1
 8000556:	43db      	mvns	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	400a      	ands	r2, r1
 8000560:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	6819      	ldr	r1, [r3, #0]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	430a      	orrs	r2, r1
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	e0c2      	b.n	80006fa <GPIO_Init+0x1e6>

	} else {
		// This is an interrupt
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	795b      	ldrb	r3, [r3, #5]
 8000578:	2b04      	cmp	r3, #4
 800057a:	d117      	bne.n	80005ac <GPIO_Init+0x98>
			// 1. configuring falling trigger register
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800057c:	4b47      	ldr	r3, [pc, #284]	@ (800069c <GPIO_Init+0x188>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	7912      	ldrb	r2, [r2, #4]
 8000584:	4611      	mov	r1, r2
 8000586:	2201      	movs	r2, #1
 8000588:	408a      	lsls	r2, r1
 800058a:	4611      	mov	r1, r2
 800058c:	4a43      	ldr	r2, [pc, #268]	@ (800069c <GPIO_Init+0x188>)
 800058e:	430b      	orrs	r3, r1
 8000590:	60d3      	str	r3, [r2, #12]
			// 2. clear corresponding rtsr bit
			EXTI->RTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000592:	4b42      	ldr	r3, [pc, #264]	@ (800069c <GPIO_Init+0x188>)
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	7912      	ldrb	r2, [r2, #4]
 800059a:	4611      	mov	r1, r2
 800059c:	2201      	movs	r2, #1
 800059e:	408a      	lsls	r2, r1
 80005a0:	43d2      	mvns	r2, r2
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a3d      	ldr	r2, [pc, #244]	@ (800069c <GPIO_Init+0x188>)
 80005a6:	400b      	ands	r3, r1
 80005a8:	6093      	str	r3, [r2, #8]
 80005aa:	e035      	b.n	8000618 <GPIO_Init+0x104>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	795b      	ldrb	r3, [r3, #5]
 80005b0:	2b05      	cmp	r3, #5
 80005b2:	d117      	bne.n	80005e4 <GPIO_Init+0xd0>
			// 1. Configure raising trigger register
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b4:	4b39      	ldr	r3, [pc, #228]	@ (800069c <GPIO_Init+0x188>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	7912      	ldrb	r2, [r2, #4]
 80005bc:	4611      	mov	r1, r2
 80005be:	2201      	movs	r2, #1
 80005c0:	408a      	lsls	r2, r1
 80005c2:	4611      	mov	r1, r2
 80005c4:	4a35      	ldr	r2, [pc, #212]	@ (800069c <GPIO_Init+0x188>)
 80005c6:	430b      	orrs	r3, r1
 80005c8:	6093      	str	r3, [r2, #8]
			// 2. clear corresponding ftsr bit
			EXTI->FTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ca:	4b34      	ldr	r3, [pc, #208]	@ (800069c <GPIO_Init+0x188>)
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	7912      	ldrb	r2, [r2, #4]
 80005d2:	4611      	mov	r1, r2
 80005d4:	2201      	movs	r2, #1
 80005d6:	408a      	lsls	r2, r1
 80005d8:	43d2      	mvns	r2, r2
 80005da:	4611      	mov	r1, r2
 80005dc:	4a2f      	ldr	r2, [pc, #188]	@ (800069c <GPIO_Init+0x188>)
 80005de:	400b      	ands	r3, r1
 80005e0:	60d3      	str	r3, [r2, #12]
 80005e2:	e019      	b.n	8000618 <GPIO_Init+0x104>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	795b      	ldrb	r3, [r3, #5]
 80005e8:	2b06      	cmp	r3, #6
 80005ea:	d115      	bne.n	8000618 <GPIO_Init+0x104>
			// 1. configure FTSR and RTSR
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ec:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <GPIO_Init+0x188>)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	7912      	ldrb	r2, [r2, #4]
 80005f4:	4611      	mov	r1, r2
 80005f6:	2201      	movs	r2, #1
 80005f8:	408a      	lsls	r2, r1
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a27      	ldr	r2, [pc, #156]	@ (800069c <GPIO_Init+0x188>)
 80005fe:	430b      	orrs	r3, r1
 8000600:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000602:	4b26      	ldr	r3, [pc, #152]	@ (800069c <GPIO_Init+0x188>)
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	7912      	ldrb	r2, [r2, #4]
 800060a:	4611      	mov	r1, r2
 800060c:	2201      	movs	r2, #1
 800060e:	408a      	lsls	r2, r1
 8000610:	4611      	mov	r1, r2
 8000612:	4a22      	ldr	r2, [pc, #136]	@ (800069c <GPIO_Init+0x188>)
 8000614:	430b      	orrs	r3, r1
 8000616:	60d3      	str	r3, [r2, #12]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	089b      	lsrs	r3, r3, #2
 800061e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	791b      	ldrb	r3, [r3, #4]
 8000624:	f003 0303 	and.w	r3, r3, #3
 8000628:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <GPIO_Init+0x18c>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d045      	beq.n	80006c0 <GPIO_Init+0x1ac>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a1a      	ldr	r2, [pc, #104]	@ (80006a4 <GPIO_Init+0x190>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d02b      	beq.n	8000696 <GPIO_Init+0x182>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a19      	ldr	r2, [pc, #100]	@ (80006a8 <GPIO_Init+0x194>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d024      	beq.n	8000692 <GPIO_Init+0x17e>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a17      	ldr	r2, [pc, #92]	@ (80006ac <GPIO_Init+0x198>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d01d      	beq.n	800068e <GPIO_Init+0x17a>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a16      	ldr	r2, [pc, #88]	@ (80006b0 <GPIO_Init+0x19c>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d016      	beq.n	800068a <GPIO_Init+0x176>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a14      	ldr	r2, [pc, #80]	@ (80006b4 <GPIO_Init+0x1a0>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d00f      	beq.n	8000686 <GPIO_Init+0x172>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a13      	ldr	r2, [pc, #76]	@ (80006b8 <GPIO_Init+0x1a4>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d008      	beq.n	8000682 <GPIO_Init+0x16e>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a11      	ldr	r2, [pc, #68]	@ (80006bc <GPIO_Init+0x1a8>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d101      	bne.n	800067e <GPIO_Init+0x16a>
 800067a:	2307      	movs	r3, #7
 800067c:	e021      	b.n	80006c2 <GPIO_Init+0x1ae>
 800067e:	2300      	movs	r3, #0
 8000680:	e01f      	b.n	80006c2 <GPIO_Init+0x1ae>
 8000682:	2306      	movs	r3, #6
 8000684:	e01d      	b.n	80006c2 <GPIO_Init+0x1ae>
 8000686:	2305      	movs	r3, #5
 8000688:	e01b      	b.n	80006c2 <GPIO_Init+0x1ae>
 800068a:	2304      	movs	r3, #4
 800068c:	e019      	b.n	80006c2 <GPIO_Init+0x1ae>
 800068e:	2303      	movs	r3, #3
 8000690:	e017      	b.n	80006c2 <GPIO_Init+0x1ae>
 8000692:	2302      	movs	r3, #2
 8000694:	e015      	b.n	80006c2 <GPIO_Init+0x1ae>
 8000696:	2301      	movs	r3, #1
 8000698:	e013      	b.n	80006c2 <GPIO_Init+0x1ae>
 800069a:	bf00      	nop
 800069c:	40013c00 	.word	0x40013c00
 80006a0:	40020000 	.word	0x40020000
 80006a4:	40020400 	.word	0x40020400
 80006a8:	40020800 	.word	0x40020800
 80006ac:	40020c00 	.word	0x40020c00
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40021400 	.word	0x40021400
 80006b8:	40021800 	.word	0x40021800
 80006bc:	40021c00 	.word	0x40021c00
 80006c0:	2300      	movs	r3, #0
 80006c2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006c4:	4b5d      	ldr	r3, [pc, #372]	@ (800083c <GPIO_Init+0x328>)
 80006c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006c8:	4a5c      	ldr	r2, [pc, #368]	@ (800083c <GPIO_Init+0x328>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ce:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode<<(temp2*4);
 80006d0:	7c7a      	ldrb	r2, [r7, #17]
 80006d2:	7cbb      	ldrb	r3, [r7, #18]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	fa02 f103 	lsl.w	r1, r2, r3
 80006da:	4a59      	ldr	r2, [pc, #356]	@ (8000840 <GPIO_Init+0x32c>)
 80006dc:	7cfb      	ldrb	r3, [r7, #19]
 80006de:	3302      	adds	r3, #2
 80006e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//3. Enable exti interrupt delivery using IMR
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e4:	4b57      	ldr	r3, [pc, #348]	@ (8000844 <GPIO_Init+0x330>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	7912      	ldrb	r2, [r2, #4]
 80006ec:	4611      	mov	r1, r2
 80006ee:	2201      	movs	r2, #1
 80006f0:	408a      	lsls	r2, r1
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a53      	ldr	r2, [pc, #332]	@ (8000844 <GPIO_Init+0x330>)
 80006f6:	430b      	orrs	r3, r1
 80006f8:	6013      	str	r3, [r2, #0]

	}
	temp = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
	//2. CONFIGURE SPEED
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	799b      	ldrb	r3, [r3, #6]
 8000702:	461a      	mov	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	689a      	ldr	r2, [r3, #8]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	4619      	mov	r1, r3
 800071c:	2303      	movs	r3, #3
 800071e:	408b      	lsls	r3, r1
 8000720:	43db      	mvns	r3, r3
 8000722:	4619      	mov	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	400a      	ands	r2, r1
 800072a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6899      	ldr	r1, [r3, #8]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	430a      	orrs	r2, r1
 800073a:	609a      	str	r2, [r3, #8]
	temp = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
	//3. CONFIGURE PUPD SETTINGS
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinpupdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	79db      	ldrb	r3, [r3, #7]
 8000744:	461a      	mov	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	68da      	ldr	r2, [r3, #12]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	4619      	mov	r1, r3
 800075e:	2303      	movs	r3, #3
 8000760:	408b      	lsls	r3, r1
 8000762:	43db      	mvns	r3, r3
 8000764:	4619      	mov	r1, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	400a      	ands	r2, r1
 800076c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	68d9      	ldr	r1, [r3, #12]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	697a      	ldr	r2, [r7, #20]
 800077a:	430a      	orrs	r2, r1
 800077c:	60da      	str	r2, [r3, #12]
	temp = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
	//4. CONFIGURE O/P TYPE
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	7a1b      	ldrb	r3, [r3, #8]
 8000786:	461a      	mov	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	685a      	ldr	r2, [r3, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	791b      	ldrb	r3, [r3, #4]
 800079c:	4619      	mov	r1, r3
 800079e:	2303      	movs	r3, #3
 80007a0:	408b      	lsls	r3, r1
 80007a2:	43db      	mvns	r3, r3
 80007a4:	4619      	mov	r1, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	400a      	ands	r2, r1
 80007ac:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	6859      	ldr	r1, [r3, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	430a      	orrs	r2, r1
 80007bc:	605a      	str	r2, [r3, #4]
	temp = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
	//5. CONFIGURE ALT FUNCTION
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	795b      	ldrb	r3, [r3, #5]
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d134      	bne.n	8000834 <GPIO_Init+0x320>
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	08db      	lsrs	r3, r3, #3
 80007d0:	743b      	strb	r3, [r7, #16]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	791b      	ldrb	r3, [r3, #4]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	73fb      	strb	r3, [r7, #15]
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<(4*temp2) );
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	7a5b      	ldrb	r3, [r3, #9]
 80007e0:	461a      	mov	r2, r3
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF <<(4*temp2) );
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	7c3a      	ldrb	r2, [r7, #16]
 80007f2:	3208      	adds	r2, #8
 80007f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	220f      	movs	r2, #15
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	43db      	mvns	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	7c3a      	ldrb	r2, [r7, #16]
 800080c:	4001      	ands	r1, r0
 800080e:	3208      	adds	r2, #8
 8000810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= temp;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	7c3a      	ldrb	r2, [r7, #16]
 800081a:	3208      	adds	r2, #8
 800081c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	7c3a      	ldrb	r2, [r7, #16]
 8000826:	6979      	ldr	r1, [r7, #20]
 8000828:	4301      	orrs	r1, r0
 800082a:	3208      	adds	r2, #8
 800082c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
	}

}
 8000834:	bf00      	nop
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40013800 	.word	0x40013800
 8000844:	40013c00 	.word	0x40013c00

08000848 <SPI_PeriClockControl>:

/*
 * Peripheral Clock setup
 * */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d120      	bne.n	800089c <SPI_PeriClockControl+0x54>
		if (pSPIx == SPI1) {
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a22      	ldr	r2, [pc, #136]	@ (80008e8 <SPI_PeriClockControl+0xa0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d106      	bne.n	8000870 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000862:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000866:	4a21      	ldr	r2, [pc, #132]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 8000868:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800086c:	6453      	str	r3, [r2, #68]	@ 0x44
							SPI2_PCLK_DI();
						}else if (pSPIx == SPI3) {
							SPI3_PCLK_DI();
						}
	}
}
 800086e:	e035      	b.n	80008dc <SPI_PeriClockControl+0x94>
				} else if (pSPIx == SPI2) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a1f      	ldr	r2, [pc, #124]	@ (80008f0 <SPI_PeriClockControl+0xa8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d106      	bne.n	8000886 <SPI_PeriClockControl+0x3e>
					SPI2_PCLK_EN();
 8000878:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000884:	e02a      	b.n	80008dc <SPI_PeriClockControl+0x94>
				}else if (pSPIx == SPI3) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a1a      	ldr	r2, [pc, #104]	@ (80008f4 <SPI_PeriClockControl+0xac>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d126      	bne.n	80008dc <SPI_PeriClockControl+0x94>
					SPI3_PCLK_EN();
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	4a16      	ldr	r2, [pc, #88]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 8000894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000898:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800089a:	e01f      	b.n	80008dc <SPI_PeriClockControl+0x94>
		if (pSPIx == SPI1) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a12      	ldr	r2, [pc, #72]	@ (80008e8 <SPI_PeriClockControl+0xa0>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d106      	bne.n	80008b2 <SPI_PeriClockControl+0x6a>
					SPI1_PCLK_DI();
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 80008a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a8:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 80008aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008ae:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008b0:	e014      	b.n	80008dc <SPI_PeriClockControl+0x94>
						} else if (pSPIx == SPI2) {
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <SPI_PeriClockControl+0xa8>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <SPI_PeriClockControl+0x80>
							SPI2_PCLK_DI();
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	4a0b      	ldr	r2, [pc, #44]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 80008c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80008c4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008c6:	e009      	b.n	80008dc <SPI_PeriClockControl+0x94>
						}else if (pSPIx == SPI3) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <SPI_PeriClockControl+0xac>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d105      	bne.n	80008dc <SPI_PeriClockControl+0x94>
							SPI3_PCLK_DI();
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 80008d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008da:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40013000 	.word	0x40013000
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40003800 	.word	0x40003800
 80008f4:	40003c00 	.word	0x40003c00

080008f8 <SPI_Init>:

/*
 * Init and DEInit
 * */
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
	// Enable peripheral clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2101      	movs	r1, #1
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff9c 	bl	8000848 <SPI_PeriClockControl>
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	795b      	ldrb	r3, [r3, #5]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d102      	bne.n	800091e <SPI_Init+0x26>
		// Clear BIDI_Mode
		temp &= !(1<<SPI_CR1_BIDIMODE);
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	e014      	b.n	8000948 <SPI_Init+0x50>
	} else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	2b02      	cmp	r3, #2
 8000924:	d104      	bne.n	8000930 <SPI_Init+0x38>
		// Set BIDI_Mode
		temp |= 1<<SPI_CR1_BIDIMODE;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	e00b      	b.n	8000948 <SPI_Init+0x50>

	} else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_RXONLY) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	795b      	ldrb	r3, [r3, #5]
 8000934:	2b03      	cmp	r3, #3
 8000936:	d107      	bne.n	8000948 <SPI_Init+0x50>
		// Clear BIDI_MODE and SET RX_ONLY mode
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800093e:	60fb      	str	r3, [r7, #12]
		temp |= 1<<SPI_CR1_RXONLY;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000946:	60fb      	str	r3, [r7, #12]
	}

	temp |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	79db      	ldrb	r3, [r3, #7]
 800094c:	02db      	lsls	r3, r3, #11
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	4313      	orrs	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
	temp |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7a9b      	ldrb	r3, [r3, #10]
 8000958:	025b      	lsls	r3, r3, #9
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	4313      	orrs	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
	temp |= pSPIHandle->SPIConfig.SPI_DeviceMode<<SPI_CR1_MSTR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	791b      	ldrb	r3, [r3, #4]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	4313      	orrs	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
	temp |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR2_0;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	799b      	ldrb	r3, [r3, #6]
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	4313      	orrs	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
	temp |= pSPIHandle->SPIConfig.SPI_CPHA <<SPI_CR1_CHPA;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7a5b      	ldrb	r3, [r3, #9]
 800097c:	461a      	mov	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	4313      	orrs	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
	temp |= pSPIHandle->SPIConfig.SPI_CPOL < SPI_CR1_CPOL;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7a1b      	ldrb	r3, [r3, #8]
 8000988:	2b00      	cmp	r3, #0
 800098a:	bf0c      	ite	eq
 800098c:	2301      	moveq	r3, #1
 800098e:	2300      	movne	r3, #0
 8000990:	b2db      	uxtb	r3, r3
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4313      	orrs	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	601a      	str	r2, [r3, #0]
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <SPI_SendData>:
 * */



//*** This is a blocking call function, it is called blocking because until all the thousand bytes are transferred function will not return.
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t  *pTxBuffer, uint32_t length) {
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b084      	sub	sp, #16
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]

	while(length>0) {
 80009b6:	e024      	b.n	8000a02 <SPI_SendData+0x58>
		// checking if TX buffer is empty else we have to wait; Check for TXE Bit.
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 80009b8:	bf00      	nop
 80009ba:	2102      	movs	r1, #2
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f000 f828 	bl	8000a12 <SPI_GetFlagStatus>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d0f8      	beq.n	80009ba <SPI_SendData+0x10>
		// Check for DFF bit to know if data is 8 bit or 16 bit.
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF)) {
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d00b      	beq.n	80009ec <SPI_SendData+0x42>
				// 16 bit data frame
				*((uint16_t*)pTxBuffer) = pSPIx->DR;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	b29a      	uxth	r2, r3
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	801a      	strh	r2, [r3, #0]
				length--;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
				(uint16_t*)pTxBuffer++;
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	3301      	adds	r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	e007      	b.n	80009fc <SPI_SendData+0x52>
		} else {
				// 8 bit data frame
				*pTxBuffer = pSPIx->DR;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	701a      	strb	r2, [r3, #0]
				pTxBuffer++;
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	3301      	adds	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
		}
			length--;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
	while(length>0) {
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1d7      	bne.n	80009b8 <SPI_SendData+0xe>


	}
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <SPI_GetFlagStatus>:

/*
 * Other Peripheral Control API's
 * */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName) {
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]

	if (pSPIx->SR & FlagName) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	4013      	ands	r3, r2
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <SPI_Peripheral_Control>:

void SPI_Peripheral_Control(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	460b      	mov	r3, r1
 8000a44:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000a46:	78fb      	ldrb	r3, [r7, #3]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d106      	bne.n	8000a5a <SPI_Peripheral_Control+0x20>
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 8000a58:	e005      	b.n	8000a66 <SPI_Peripheral_Control+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <SPI_SSOEConfig>:
	} else {
		pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
	}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000a7e:	78fb      	ldrb	r3, [r7, #3]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d106      	bne.n	8000a92 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1<<SPI_CR2_SSOE);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f043 0204 	orr.w	r2, r3, #4
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	605a      	str	r2, [r3, #4]
	} else {
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
	}
}
 8000a90:	e005      	b.n	8000a9e <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f023 0204 	bic.w	r2, r3, #4
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <__libc_init_array>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	4d0d      	ldr	r5, [pc, #52]	@ (8000ae4 <__libc_init_array+0x38>)
 8000ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8000ae8 <__libc_init_array+0x3c>)
 8000ab2:	1b64      	subs	r4, r4, r5
 8000ab4:	10a4      	asrs	r4, r4, #2
 8000ab6:	2600      	movs	r6, #0
 8000ab8:	42a6      	cmp	r6, r4
 8000aba:	d109      	bne.n	8000ad0 <__libc_init_array+0x24>
 8000abc:	4d0b      	ldr	r5, [pc, #44]	@ (8000aec <__libc_init_array+0x40>)
 8000abe:	4c0c      	ldr	r4, [pc, #48]	@ (8000af0 <__libc_init_array+0x44>)
 8000ac0:	f000 f818 	bl	8000af4 <_init>
 8000ac4:	1b64      	subs	r4, r4, r5
 8000ac6:	10a4      	asrs	r4, r4, #2
 8000ac8:	2600      	movs	r6, #0
 8000aca:	42a6      	cmp	r6, r4
 8000acc:	d105      	bne.n	8000ada <__libc_init_array+0x2e>
 8000ace:	bd70      	pop	{r4, r5, r6, pc}
 8000ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad4:	4798      	blx	r3
 8000ad6:	3601      	adds	r6, #1
 8000ad8:	e7ee      	b.n	8000ab8 <__libc_init_array+0xc>
 8000ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ade:	4798      	blx	r3
 8000ae0:	3601      	adds	r6, #1
 8000ae2:	e7f2      	b.n	8000aca <__libc_init_array+0x1e>
 8000ae4:	08000b24 	.word	0x08000b24
 8000ae8:	08000b24 	.word	0x08000b24
 8000aec:	08000b24 	.word	0x08000b24
 8000af0:	08000b28 	.word	0x08000b28

08000af4 <_init>:
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af6:	bf00      	nop
 8000af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afa:	bc08      	pop	{r3}
 8000afc:	469e      	mov	lr, r3
 8000afe:	4770      	bx	lr

08000b00 <_fini>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	bf00      	nop
 8000b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b06:	bc08      	pop	{r3}
 8000b08:	469e      	mov	lr, r3
 8000b0a:	4770      	bx	lr
